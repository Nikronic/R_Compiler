/* The following code was generated by JFlex 1.3.5 on 6/7/18 6:18 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 6/7/18 6:18 PM from the specification file
 * <tt>file:/F:/Data/Github/R_Compiler/CUP_R_compiler/lexer.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 43,  3, 21,  0,  0, 44,  0, 33, 34, 39,  7, 32, 38,  5, 40, 
     9,  8,  8,  8,  8,  8,  8,  8,  8,  8, 46,  0, 37, 41, 42,  0, 
     0, 18, 12, 12, 12, 16, 17,  4,  4,  4,  4,  4, 19,  4,  4,  4, 
     4,  4, 14, 20, 13, 15,  4,  4, 11,  4,  4,  0,  0,  0,  0,  4, 
     0, 12, 12, 30, 12, 25, 23,  4,  4, 22,  4,  4, 10,  4, 24, 27, 
     4,  4, 28, 26, 31, 29,  4,  6, 11,  4,  4, 35, 45, 36,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    47,    94,   141,   188,   235,   282,   329,   376,   423, 
      470,   517,   564,   611,   658,   658,   658,   658,   658,   705, 
      235,   658,   658,   752,   799,   846,   893,   940,   658,   658, 
      987,   987,  1034,   658,  1081,  1128,  1175,   658,   658,  1222, 
     1269,  1316,   658,   658,   658,   658,   658,   658,   658,  1081, 
     1363,  1410,   658,  1457,  1504,   658,  1551,   658,  1598,  1645, 
     1692,   658
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\0\2\2\1\3\1\4\1\5\1\4\1\6\1\7"+
    "\1\10\3\4\1\11\3\4\1\12\3\4\1\13\1\14"+
    "\1\15\1\4\1\16\6\4\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\0\2\2\54\0\3\3\1\36"+
    "\53\3\5\0\2\4\54\0\1\4\1\0\1\4\1\0"+
    "\2\37\13\4\1\0\12\4\24\0\1\40\2\0\1\7"+
    "\1\41\52\0\1\37\2\0\2\7\1\42\10\0\1\42"+
    "\40\0\1\37\2\0\2\41\1\0\1\43\50\0\2\4"+
    "\7\0\1\44\45\0\2\4\13\0\1\45\34\0\1\13"+
    "\1\0\55\13\5\0\2\4\20\0\1\46\1\47\33\0"+
    "\2\4\24\0\1\50\1\0\1\51\26\0\2\4\3\0"+
    "\1\52\171\0\1\53\2\0\1\54\56\0\1\55\56\0"+
    "\1\56\56\0\1\57\61\0\1\60\57\0\1\61\11\0"+
    "\2\37\52\0\1\37\2\0\2\41\55\0\2\62\2\0"+
    "\1\62\3\0\3\62\4\0\1\62\1\0\1\62\4\0"+
    "\1\62\37\0\1\63\62\0\1\64\67\0\1\65\52\0"+
    "\1\66\60\0\1\67\44\0\1\70\62\0\1\63\70\0"+
    "\1\71\51\0\1\72\64\0\1\73\45\0\1\74\63\0"+
    "\1\75\53\0\1\76\26\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  1,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     9,  9,  9,  1,  1,  9,  9,  0,  1,  1,  0,  0,  9,  9,  1,  0, 
     1,  9,  0,  0,  0,  9,  9,  0,  0,  0,  9,  9,  9,  9,  9,  9, 
     9,  1,  0,  0,  9,  0,  0,  9,  0,  9,  0,  0,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public Lexer(java.io.Reader in, ComplexSymbolFactory sf){
	this(in);
	    symbolFactory = sf;
    }
    ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();

  private Symbol symbol(String name, int sym) {
      return symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
  }

  private Symbol symbol(String name, int sym, Object val) {
      Location left = new Location(yyline+1,yycolumn+1,yychar);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  private Symbol symbol(String name, int sym, Object val,int buflength) {
      Location left = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
      Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }
  private void error(String message) {
    System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[1739];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 52: 
          {  return symbol("for",FOR);  }
        case 63: break;
        case 47: 
          {  return symbol("and",AND);  }
        case 64: break;
        case 46: 
          {  return symbol("neq",NEQ);  }
        case 65: break;
        case 45: 
          {  return symbol("gtq",GTQ);  }
        case 66: break;
        case 43: 
          {  return symbol("leq",LEQ);  }
        case 67: break;
        case 15: 
          {  return symbol("(",LPAR);  }
        case 68: break;
        case 16: 
          {  return symbol(")",RPAR);  }
        case 69: break;
        case 17: 
          {  return symbol("{",BEGIN);  }
        case 70: break;
        case 22: 
          {  return symbol("div",DIV);  }
        case 71: break;
        case 25: 
          {  return symbol("not",NOT);  }
        case 72: break;
        case 3: 
        case 8: 
        case 9: 
        case 11: 
        case 12: 
        case 13: 
          {  return symbol("Identifier",IDENT, yytext());  }
        case 73: break;
        case 57: 
          {  return symbol("else",ELSE);  }
        case 74: break;
        case 42: 
          {  return symbol("<-",ASSIGN);  }
        case 75: break;
        case 5: 
          {  return symbol("plus",PLUS);  }
        case 76: break;
        case 21: 
          {  return symbol("mult",MULT);  }
        case 77: break;
        case 29: 
          {  return symbol("STRINGCONST",STRINGCONST, yytext());  }
        case 78: break;
        case 28: 
          {  return symbol("colon",COLON); }
        case 79: break;
        case 14: 
          {  return symbol("comma",COMMA);  }
        case 80: break;
        case 20: 
          {  return symbol("minus",MINUS);  }
        case 81: break;
        case 6: 
        case 33: 
        case 49: 
          {  return symbol("INTCONST",INTCONST, new Integer(Integer.parseInt(yytext())));  }
        case 82: break;
        case 1: 
          {   }
        case 83: break;
        case 55: 
          {  return symbol("BOOLCONST",BOOLCONST, new Boolean(Boolean.parseBoolean(yytext())));  }
        case 84: break;
        case 48: 
          {  return symbol("or",OR);  }
        case 85: break;
        case 44: 
          {  return symbol("eq",EQ);  }
        case 86: break;
        case 38: 
          {  return symbol("if",IN);  }
        case 87: break;
        case 37: 
          {  return symbol("if",IF);  }
        case 88: break;
        case 18: 
          {  return symbol("}",END);  }
        case 89: break;
        case 19: 
          {  return symbol("le",LE);  }
        case 90: break;
        case 24: 
          {  return symbol("gt",GT);  }
        case 91: break;
        case 61: 
          {  return symbol("function",FUNCTION);  }
        case 92: break;
        case 7: 
        case 30: 
        case 32: 
          {  return symbol("FLOATCONST",FLOATCONST, new Float(Float.parseFloat(yytext())));  }
        case 93: break;
        case 10: 
          {  return symbol("Comments",COMMENTS); }
        case 94: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {      return symbolFactory.newSymbol("EOF", EOF, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+1,yychar+1));
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}

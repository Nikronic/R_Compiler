/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    scanner s;
    Parser(scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal COMMA, LPAR, RPAR, BEGIN, END, IF, ELSE, WHILE, READ, WRITE, BUNOP, ASSIGN; // read and write should be changed by our defined symbol.
terminal BINOP, UNOP, COMP, BBINOP, INTCONST;
terminal IDENT,STRINGCONST;
terminal BOOLCONST;

non terminal program, decllist,decl,stmtlist,identlist,stmt,expr,cond;

precedence left ELSE, UNOP, BINOP, BUNOP, BBINOP;

program   ::=  decllist:d stmtlist:s
    ;
decllist  ::=  decl:d decllist:dl
    | /* empty */
    ;
stmtlist  ::= stmtlist:sl stmt:s
    | /* empty */
        ;
decl ::=  IDENT:identifier identlist:il
    ;
identlist  ::= identlist:il COMMA IDENT:identifier
    | /* empty */
    ;
stmt ::= BEGIN stmtlist:sl END
    | IDENT:lhs ASSIGN expr:rhs
    | IDENT:lhs ASSIGN READ LPAR RPAR
    | IDENT:lhs ASSIGN READ LPAR STRINGCONST:s RPAR
    | WRITE LPAR expr:e RPAR
    | WRITE LPAR STRINGCONST:s RPAR
    | IF LPAR cond:c RPAR stmt:s
    | IF LPAR cond:c RPAR stmt:t ELSE stmt:e
    | WHILE LPAR cond:c RPAR stmt:s
    ;
cond ::= BOOLCONST:c
    | LPAR cond:c RPAR
    | expr:e1 COMP:op expr:e2
    | BUNOP cond:c
    | cond:c1 BBINOP:op cond:c2
    ;
expr ::= IDENT:identifier
    | INTCONST:constant
    | LPAR expr:e RPAR
    | BINOP expr:e
    | expr:e1 BINOP:op expr:e2
    ;
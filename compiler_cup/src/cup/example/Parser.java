
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\006\011\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\012\006\000" +
    "\002\012\006\000\002\012\004\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\011\003\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\002\000" +
    "\002\026\005\000\002\004\012\000\002\005\006\000\002" +
    "\005\002\000\002\023\015\000\002\013\004\000\002\007" +
    "\005\000\002\007\004\000\002\010\005\000\002\010\003" +
    "\000\002\015\003\000\002\015\003\000\002\027\003\000" +
    "\002\027\003\000\002\020\003\000\002\020\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\014" +
    "\005\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\003\000\002\021\005\000\002\021" +
    "\005\000\002\021\004\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\012\002\uffec\004\014\006\006\035\005\001" +
    "\002\000\004\002\ufffe\001\002\000\006\012\022\016\133" +
    "\001\002\000\004\012\117\001\002\000\004\002\001\001" +
    "\002\000\014\002\uffec\004\014\006\006\015\uffec\035\020" +
    "\001\002\000\012\002\uffec\004\014\006\006\035\005\001" +
    "\002\000\004\002\114\001\002\000\014\002\uffec\004\014" +
    "\006\006\015\uffec\035\020\001\002\000\004\012\067\001" +
    "\002\000\014\002\uffec\004\014\006\006\015\uffec\035\020" +
    "\001\002\000\014\002\uffec\004\014\006\006\015\uffec\035" +
    "\020\001\002\000\006\002\ufff0\015\ufff0\001\002\000\006" +
    "\012\022\016\023\001\002\000\014\002\uffe6\004\uffe6\006" +
    "\uffe6\015\uffe6\035\uffe6\001\002\000\014\013\060\035\057" +
    "\036\035\037\030\041\055\001\002\000\016\034\034\035" +
    "\024\036\035\037\030\040\031\041\026\001\002\000\042" +
    "\002\uffdc\004\uffdc\006\uffdc\013\uffdc\015\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\035\uffdc\001\002\000\014\002\uffeb\004" +
    "\uffeb\006\uffeb\015\uffeb\035\uffeb\001\002\000\014\002\uffc6" +
    "\004\uffc6\006\uffc6\015\uffc6\035\uffc6\001\002\000\014\002" +
    "\uffc7\004\uffc7\006\uffc7\015\uffc7\035\uffc7\001\002\000\044" +
    "\002\uffe0\004\uffe0\006\uffe0\011\uffe0\013\uffe0\015\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\035\uffe0\001\002\000\020\002" +
    "\uffc9\004\uffc9\006\uffc9\015\uffc9\032\050\033\051\035\uffc9" +
    "\001\002\000\024\002\uffcd\004\uffcd\006\uffcd\015\uffcd\020" +
    "\041\021\042\022\040\023\043\035\uffcd\001\002\000\042" +
    "\002\uffdd\004\uffdd\006\uffdd\013\uffdd\015\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\035\uffdd\001\002\000\006\034\034\040" +
    "\031\001\002\000\044\002\uffe1\004\uffe1\006\uffe1\011\uffe1" +
    "\013\uffe1\015\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\035\uffe1" +
    "\001\002\000\014\002\uffc8\004\uffc8\006\uffc8\015\uffc8\035" +
    "\uffc8\001\002\000\014\002\uffca\004\uffca\006\uffca\015\uffca" +
    "\035\uffca\001\002\000\010\035\024\036\035\037\030\001" +
    "\002\000\010\035\024\036\035\037\030\001\002\000\010" +
    "\035\024\036\035\037\030\001\002\000\010\035\024\036" +
    "\035\037\030\001\002\000\014\002\uffce\004\uffce\006\uffce" +
    "\015\uffce\035\uffce\001\002\000\014\002\uffd0\004\uffd0\006" +
    "\uffd0\015\uffd0\035\uffd0\001\002\000\014\002\uffd1\004\uffd1" +
    "\006\uffd1\015\uffd1\035\uffd1\001\002\000\014\002\uffcf\004" +
    "\uffcf\006\uffcf\015\uffcf\035\uffcf\001\002\000\006\034\034" +
    "\040\031\001\002\000\006\034\034\040\031\001\002\000" +
    "\014\002\uffcc\004\uffcc\006\uffcc\015\uffcc\035\uffcc\001\002" +
    "\000\014\002\uffcb\004\uffcb\006\uffcb\015\uffcb\035\uffcb\001" +
    "\002\000\006\011\061\013\063\001\002\000\006\011\uffda" +
    "\013\uffda\001\002\000\006\011\uffdb\013\uffdb\001\002\000" +
    "\006\011\uffd9\013\uffd9\001\002\000\014\002\uffe4\004\uffe4" +
    "\006\uffe4\015\uffe4\035\uffe4\001\002\000\012\035\057\036" +
    "\035\037\030\041\055\001\002\000\014\002\uffe5\004\uffe5" +
    "\006\uffe5\015\uffe5\035\uffe5\001\002\000\014\002\uffe2\004" +
    "\uffe2\006\uffe2\015\uffe2\035\uffe2\001\002\000\006\011\061" +
    "\013\063\001\002\000\014\002\uffe3\004\uffe3\006\uffe3\015" +
    "\uffe3\035\uffe3\001\002\000\006\002\uffed\015\uffed\001\002" +
    "\000\010\035\024\036\035\037\030\001\002\000\016\024" +
    "\107\025\104\026\105\027\111\030\110\031\106\001\002" +
    "\000\004\013\072\001\002\000\004\014\073\001\002\000" +
    "\012\004\014\006\006\015\uffec\035\020\001\002\000\004" +
    "\015\075\001\002\000\016\002\uffe8\004\uffe8\005\077\006" +
    "\uffe8\015\uffe8\035\uffe8\001\002\000\014\002\uffea\004\uffea" +
    "\006\uffea\015\uffea\035\uffea\001\002\000\004\014\100\001" +
    "\002\000\012\004\014\006\006\015\uffec\035\020\001\002" +
    "\000\004\015\102\001\002\000\014\002\uffe9\004\uffe9\006" +
    "\uffe9\015\uffe9\035\uffe9\001\002\000\010\035\024\036\035" +
    "\037\030\001\002\000\010\035\uffd6\036\uffd6\037\uffd6\001" +
    "\002\000\010\035\uffd5\036\uffd5\037\uffd5\001\002\000\010" +
    "\035\uffd2\036\uffd2\037\uffd2\001\002\000\010\035\uffd7\036" +
    "\uffd7\037\uffd7\001\002\000\010\035\uffd3\036\uffd3\037\uffd3" +
    "\001\002\000\010\035\uffd4\036\uffd4\037\uffd4\001\002\000" +
    "\004\013\uffd8\001\002\000\006\002\uffee\015\uffee\001\002" +
    "\000\004\002\000\001\002\000\004\002\uffff\001\002\000" +
    "\006\002\uffef\015\uffef\001\002\000\004\035\120\001\002" +
    "\000\004\010\121\001\002\000\006\035\123\036\122\001" +
    "\002\000\006\013\uffdf\017\uffdf\001\002\000\006\013\uffde" +
    "\017\uffde\001\002\000\004\017\125\001\002\000\006\035" +
    "\123\036\122\001\002\000\004\013\127\001\002\000\004" +
    "\014\130\001\002\000\012\004\014\006\006\015\uffec\035" +
    "\020\001\002\000\004\015\132\001\002\000\014\002\uffe7" +
    "\004\uffe7\006\uffe7\015\uffe7\035\uffe7\001\002\000\020\007" +
    "\134\034\034\035\024\036\035\037\030\040\031\041\026" +
    "\001\002\000\004\012\135\001\002\000\016\013\146\035" +
    "\144\042\147\043\145\044\143\045\142\001\002\000\004" +
    "\014\137\001\002\000\012\004\014\006\006\015\uffec\035" +
    "\020\001\002\000\004\015\141\001\002\000\012\002\ufffd" +
    "\004\ufffd\006\ufffd\035\ufffd\001\002\000\004\035\201\001" +
    "\002\000\004\035\177\001\002\000\004\035\175\001\002" +
    "\000\004\035\173\001\002\000\004\014\ufff7\001\002\000" +
    "\004\035\150\001\002\000\006\011\151\013\153\001\002" +
    "\000\014\035\156\042\160\043\157\044\155\045\154\001" +
    "\002\000\004\014\ufffc\001\002\000\004\014\ufff1\001\002" +
    "\000\004\035\171\001\002\000\004\035\167\001\002\000" +
    "\004\035\165\001\002\000\004\035\163\001\002\000\004" +
    "\035\161\001\002\000\006\011\151\013\153\001\002\000" +
    "\004\014\ufff6\001\002\000\006\011\151\013\153\001\002" +
    "\000\004\014\ufff4\001\002\000\006\011\151\013\153\001" +
    "\002\000\004\014\ufff2\001\002\000\006\011\151\013\153" +
    "\001\002\000\004\014\ufff3\001\002\000\006\011\151\013" +
    "\153\001\002\000\004\014\ufff5\001\002\000\006\011\151" +
    "\013\153\001\002\000\004\014\ufffa\001\002\000\006\011" +
    "\151\013\153\001\002\000\004\014\ufff8\001\002\000\006" +
    "\011\151\013\153\001\002\000\004\014\ufff9\001\002\000" +
    "\006\011\151\013\153\001\002\000\004\014\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\022\002\011\003\006\004\012\006\010\013" +
    "\007\023\014\024\003\026\015\001\001\000\002\001\001" +
    "\000\004\007\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\012\013\007\023\014\024\115\026\015" +
    "\001\001\000\020\003\114\004\012\006\010\013\007\023" +
    "\014\024\003\026\015\001\001\000\002\001\001\000\014" +
    "\004\012\013\007\023\014\024\112\026\015\001\001\000" +
    "\002\001\001\000\014\004\012\013\007\023\014\024\065" +
    "\026\015\001\001\000\014\004\012\013\007\023\014\024" +
    "\016\026\015\001\001\000\002\001\001\000\004\007\020" +
    "\001\001\000\002\001\001\000\006\015\055\030\053\001" +
    "\001\000\014\015\032\017\035\020\031\021\026\022\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\032\017\046\020\031\001\001\000\010\015" +
    "\032\017\045\020\031\001\001\000\010\015\032\017\044" +
    "\020\031\001\001\000\010\015\032\017\043\020\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\052\001\001\000\004\021" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\055\030\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\070\015\032\020\067\001\001\000\004\016\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\012" +
    "\013\007\023\014\024\073\026\015\001\001\000\002\001" +
    "\001\000\004\005\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\012\013\007\023\014\024\100\026" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\032\020\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\012\013\007\023\014\024\130\026\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\032\017" +
    "\035\020\031\021\026\022\024\001\001\000\004\012\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\012\013\007\023\014\024\137\026\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\161\001\001\000\002\001\001" +
    "\000\004\011\163\001\001\000\002\001\001\000\004\011" +
    "\165\001\001\000\002\001\001\000\004\011\167\001\001" +
    "\000\002\001\001\000\004\011\171\001\001\000\002\001" +
    "\001\000\004\011\173\001\001\000\002\001\001\000\004" +
    "\011\175\001\001\000\002\001\001\000\004\011\177\001" +
    "\001\000\002\001\001\000\004\011\201\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG2

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG3
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

//@@CUPDBG1

	Map<String, Object> symTable = new HashMap<>();
	Map<String, List<Object>> funcTable = new HashMap<>();

	private void assignment(String ident,Object o){
		if (!symTable.containsKey(ident)) {
			symTable.put(ident,o);
			System.out.println( ident + " variable Assigned : " + o);
		} else {
			if(symTable.get(ident).getClass().getName().equals(o.getClass().getName())) {
				symTable.put(ident,o);
				System.out.println( ident + " variable Assigned : " + o);
			} else {
				System.out.println("Semantic Error:: Variable " + ident + " with " + symTable.get(ident).getClass().getName() + " Assigned To " + o.getClass().getName());
			}
		}
	}

	private void callFunction(String ident,List<Object> l) {
		if(!funcTable.containsKey(ident)) {
			System.out.println("Semantic Error:: There is no function called " + ident);
		} else {
//			System.out.println("Identifier " + ident);
			if(funcTable.get(ident).size() == l.size()) {
				for (int i = 0 ; i < funcTable.get(ident).size() ; i++) {
//					System.out.print(funcTable.get(ident).get(i) + " =? ");
//					System.out.println(l.get(i));
					if(!funcTable.get(ident).get(i).equals(l.get(i))) {
						System.out.println("Semantic Error:: Arguments type of function " + ident + " that you called, didn't match to real function");
						break;
					}
				}
			} else {
				System.out.println("Semantic Error:: " + l.size() + " arguments passed to the function but function " + ident + " just accept " + funcTable.get(ident).size() + " arguments");
			}

		}


	}

	private List addNewArg(List l,Object var) {
		if(l == null){
			l = new ArrayList<Object>();
		}
		l.add(var);
		return l;
	}

	private Object getIdentValue(String ident) {
		if(!symTable.containsKey(ident)) {
			System.out.println("There is no variable called " + ident);
			return 0;
		} else {
 		try {
			return new Integer((int)symTable.get(ident));
		} catch(Exception e) {
			
		}
		return symTable.get(ident);
		}

		
	}

	private void show() {
		for(String i : funcTable.keySet()) {
			System.out.println(i + "(");
			for(Object j : funcTable.get(i)) {
				System.out.print(j + ",");
			}
			System.out.println(")");			

		}

	}


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program_util 
            {
              Object RESULT =null;
		//@@CUPDBG4
 System.out.println("Code Root Found");  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_util ::= function_def_section program_util 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_util",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_util ::= code_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_util",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_def_section ::= IDENT ASSIGN FUNCTION argument BEGIN code_section END 
            {
              Object RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG5
 System.out.println("Function Implementation Found " + n); Collections.reverse(args); funcTable.put(n,args);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_def_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // argument ::= LPAR INT IDENT argument_next 
            {
              List<Object> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 RESULT = addNewArg(args,new Integer(0).getClass().getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // argument ::= LPAR STRING IDENT argument_next 
            {
              List<Object> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
  RESULT = addNewArg(args,new String("").getClass().getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // argument ::= LPAR FLOAT IDENT argument_next 
            {
              List<Object> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
  RESULT = addNewArg(args,new Float(0).getClass().getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // argument ::= LPAR BOOL IDENT argument_next 
            {
              List<Object> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
  RESULT = addNewArg(args,new Boolean(false).getClass().getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // argument ::= LPAR IDENT IDENT argument_next 
            {
              List<Object> RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
  RESULT = addNewArg(args,ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // argument ::= LPAR RPAR 
            {
              List<Object> RESULT =null;
		//@@CUPDBG11
 RESULT = new ArrayList<Object>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // argument_next ::= COMMA INT IDENT argument_next 
            {
              List<Object> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
 RESULT = addNewArg(args,new Integer(0).getClass().getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_next",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // argument_next ::= COMMA STRING IDENT argument_next 
            {
              List<Object> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
 RESULT = addNewArg(args,new String("").getClass().getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_next",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // argument_next ::= COMMA FLOAT IDENT argument_next 
            {
              List<Object> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
 RESULT = addNewArg(args,new Float(0).getClass().getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_next",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // argument_next ::= COMMA BOOL IDENT argument_next 
            {
              List<Object> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 RESULT = addNewArg(args,new Boolean(false).getClass().getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_next",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argument_next ::= COMMA IDENT IDENT argument_next 
            {
              List<Object> RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
 RESULT = addNewArg(args,ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_next",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argument_next ::= RPAR 
            {
              List<Object> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_next",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // code_section ::= op_assignment code_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // code_section ::= call_function code_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // code_section ::= if_condition code_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // code_section ::= loop_section code_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // code_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_section",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_assignment ::= IDENT ASSIGN calculation 
            {
              Object RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
 this.assignment(v,ex);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_assignment",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_condition ::= IF LPAR logic_statement RPAR BEGIN code_section END else_condition 
            {
              Object RESULT =null;
		//@@CUPDBG18
 System.out.println("If Entry Found"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_condition",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // else_condition ::= ELSE BEGIN code_section END 
            {
              Object RESULT =null;
		//@@CUPDBG19
 System.out.println("Else Entry Found"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_condition",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // else_condition ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_condition",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // loop_section ::= FOR LPAR IDENT IN int_literal COLON int_literal RPAR BEGIN code_section END 
            {
              Object RESULT =null;
		//@@CUPDBG20
 System.out.println("Loop Entry Found"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_section",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // call_function ::= IDENT call_argument 
            {
              Object RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
 Collections.reverse(args); this.callFunction(ident,args);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_function",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // call_argument ::= LPAR operand call_argument_next 
            {
              List<Object> RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
 RESULT = addNewArg(args, o.getClass().getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_argument",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // call_argument ::= LPAR RPAR 
            {
              List<Object> RESULT =null;
		//@@CUPDBG23
 RESULT = new ArrayList<Object>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_argument",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // call_argument_next ::= COMMA operand call_argument_next 
            {
              List<Object> RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Object> args = (List<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 RESULT = addNewArg(args, o.getClass().getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_argument_next",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // call_argument_next ::= RPAR 
            {
              List<Object> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call_argument_next",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numerical_literal ::= INTCONST 
            {
              Integer RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
 RESULT = new Integer(e.intValue());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_literal",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numerical_literal ::= FLOATCONST 
            {
              Integer RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float e = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 RESULT = new Integer(e.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_literal",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // int_literal ::= INTCONST 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // int_literal ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // numerical_op ::= numerical_literal 
            {
              Integer RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 RESULT = new Integer(e.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_op",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // numerical_op ::= IDENT 
            {
              Integer RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 RESULT = (int)getIdentValue(ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numerical_op",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operand ::= numerical_literal 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operand",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operand ::= STRINGCONST 
            {
              Object RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operand",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operand ::= IDENT 
            {
              Object RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31
 RESULT = getIdentValue(ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operand",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logic_statement ::= numerical_op comparison_ops numerical_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparison_ops ::= LEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_ops",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparison_ops ::= GTQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_ops",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparison_ops ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_ops",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparison_ops ::= NEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_ops",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparison_ops ::= LE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_ops",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparison_ops ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_ops",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // math_calculation ::= numerical_op PLUS math_calculation 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 RESULT = new Integer(e1 + e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // math_calculation ::= numerical_op MINUS math_calculation 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
 RESULT = new Integer(e1 - e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // math_calculation ::= numerical_op MULT math_calculation 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34
 RESULT = new Integer(e1 * e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // math_calculation ::= numerical_op DIV math_calculation 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35
 RESULT = new Integer(e1 / e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // math_calculation ::= numerical_op 
            {
              Integer RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
 RESULT = new Integer(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("math_calculation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binary_calculation ::= BOOLCONST OR binary_calculation 
            {
              Boolean RESULT =null;
		Location b1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location b1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location b2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location b2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 RESULT = new Boolean(b1 || b2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_calculation",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // binary_calculation ::= BOOLCONST AND binary_calculation 
            {
              Boolean RESULT =null;
		Location b1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location b1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location b2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location b2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 RESULT = new Boolean(b1 && b2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_calculation",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // binary_calculation ::= NOT binary_calculation 
            {
              Boolean RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39
 RESULT = new Boolean(!b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_calculation",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // binary_calculation ::= BOOLCONST 
            {
              Boolean RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40
 RESULT = new Boolean(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_calculation",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // calculation ::= math_calculation 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("calculation",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // calculation ::= binary_calculation 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("calculation",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // calculation ::= STRINGCONST 
            {
              Object RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG43
 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("calculation",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
